// Code generated by project
// corp.go contains model for the database table [dbname=baseinfo sslmode=disable.corp]

package models

import (
	"encoding/json"
	"encoding/gob"
	"fmt"
	"strings"
	"github.com/jmoiron/sqlx"
	"database/sql"
	"time"
)
type Corp struct {
	Id int64 `json:"id"`
	CorpGroupId int64 `json:"corp_group_id"`
	Name string `json:"name"`
	Location string `json:"location"`
	Namespace string `json:"namespace"`
	CityId int64 `json:"city_id"`
	Sales string `json:"sales"`
	Removed bool `json:"removed"`
	InvoiceTitle string `json:"invoice_title"`
	Tel string `json:"tel"`
	PriceLimit float64 `json:"price_limit"`
	RealnameLabel bool `json:"realname_label"`
	EmailLimit string `json:"email_limit"`
	AutoConfirm bool `json:"auto_confirm"`
	DisplayUserPrice bool `json:"display_user_price"`
	Locations string `json:"locations"`
	UserMessage string `json:"user_message"`
	OpMessage string `json:"op_message"`
	CreateTime time.Time `json:"create_time"`
	UpdateTime time.Time `json:"update_time"`
	Creator int64 `json:"creator"`
	Operator int64 `json:"operator"`
	
}

// Start of the Corp APIs.

func (obj Corp) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return fmt.Sprintf("<Corp Id=%v>", obj.Id)
	} else {
		return string(data)
	}
}

func  QueryById(id int64) (*Corp,error){

 	ret:=&Corp{}
 	err:=db.Get(ret,"select * from dbname=baseinfo sslmode=disable where id=",id)
 	return ret,err
}

func InsertCorp(obj Corp) error(){

  db.Exec("insert into dbname=baseinfo sslmode=disable(id,corp_group_id,name,location,namespace,city_id,sales,removed,invoice_title,tel,price_limit,realname_label,email_limit,auto_confirm,display_user_price,locations,user_message,op_message,create_time,update_time,creator,operator) values(obj.Id,obj.CorpGroupId,obj.Name,obj.Location,obj.Namespace,obj.CityId,obj.Sales,obj.Removed,obj.InvoiceTitle,obj.Tel,obj.PriceLimit,obj.RealnameLabel,obj.EmailLimit,obj.AutoConfirm,obj.DisplayUserPrice,obj.Locations,obj.UserMessage,obj.OpMessage,obj.CreateTime,obj.UpdateTime,obj.Creator,obj.Operator)",obj)
  return nil
}

func (obj Corp) Get(dbtx gmq.DbTx) (Corp, error) {
	filter := CorpObjs.FilterId("=", obj.Id)
	if result, err := CorpObjs.Select().Where(filter).One(dbtx); err != nil {
		return obj, err
	} else {
		return result, nil
	}
}

func (obj Corp) Insert(dbtx gmq.DbTx) (Corp, error) {
	if result, err := CorpObjs.Insert(obj).Run(dbtx); err != nil {
		return obj, err
	}else {
		if dbtx.DriverName() != "postgres" {
			if id, err := result.LastInsertId(); err != nil {
				return obj, err
			} else {
				obj.Id = id
				return obj, err
			}
		}
		return obj, nil
	}
}

func (obj Corp) Update(dbtx gmq.DbTx) (int64, error) {
	fields := []string{ "CorpGroupId", "Name", "Location", "Namespace", "CityId", "Sales", "Removed", "InvoiceTitle", "Tel", "PriceLimit", "RealnameLabel", "EmailLimit", "AutoConfirm", "DisplayUserPrice", "Locations", "UserMessage", "OpMessage", "CreateTime", "UpdateTime", "Creator", "Operator" }
	filter := CorpObjs.FilterId("=", obj.Id)
	if result, err := CorpObjs.Update(obj, fields...).Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

func (obj Corp) Delete(dbtx gmq.DbTx) (int64, error) {
	filter := CorpObjs.FilterId("=", obj.Id)
	if result, err := CorpObjs.Delete().Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

// Start of the inner Query Api

type _CorpQuery struct {
	gmq.Query
}

func (q _CorpQuery) Where(f gmq.Filter) _CorpQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _CorpQuery) OrderBy(by ...string) _CorpQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := CorpObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _CorpQuery) GroupBy(by ...string) _CorpQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := CorpObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _CorpQuery) Limit(offsets ...int64) _CorpQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _CorpQuery) Page(number, size int) _CorpQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _CorpQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type CorpRowVisitor func(obj Corp) bool

func (q _CorpQuery) Iterate(dbtx gmq.DbTx, functor CorpRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := CorpObjs.toCorp(columns, rb)
		return functor(obj)
	})
}

func (q _CorpQuery) One(dbtx gmq.DbTx) (Corp, error) {
	var obj Corp
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = CorpObjs.toCorp(columns, rb)
		return true
	})
	return obj, err
}

func (q _CorpQuery) List(dbtx gmq.DbTx) ([]Corp, error) {
	result := make([]Corp, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := CorpObjs.toCorp(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

// Start of the model facade Apis.

type _CorpObjs struct {
	fcMap map[string]string
}

func (o _CorpObjs) Names() (schema, tbl, alias string) {
	return "dbname=baseinfo sslmode=disable", "corp", "Corp"
}

func (o _CorpObjs) Select(fields ...string) _CorpQuery {
	q := _CorpQuery{}
	if len(fields) == 0 {
		fields = []string{ "Id", "CorpGroupId", "Name", "Location", "Namespace", "CityId", "Sales", "Removed", "InvoiceTitle", "Tel", "PriceLimit", "RealnameLabel", "EmailLimit", "AutoConfirm", "DisplayUserPrice", "Locations", "UserMessage", "OpMessage", "CreateTime", "UpdateTime", "Creator", "Operator" }
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _CorpObjs) Insert(obj Corp) _CorpQuery {
	q := _CorpQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj, "CorpGroupId", "Name", "Location", "Namespace", "CityId", "Sales", "Removed", "InvoiceTitle", "Tel", "PriceLimit", "RealnameLabel", "EmailLimit", "AutoConfirm", "DisplayUserPrice", "Locations", "UserMessage", "OpMessage", "Creator", "Operator"))
	return q
}

func (o _CorpObjs) Update(obj Corp, fields ...string) _CorpQuery {
	q := _CorpQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _CorpObjs) Delete() _CorpQuery {
	q := _CorpQuery{}
	q.Query = gmq.Delete(o)
	return q
}


///// Managed Objects Filters definition

func (o _CorpObjs) FilterId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("id", op, params...)
}


func (o _CorpObjs) FilterCorpGroupId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("corp_group_id", op, params...)
}


func (o _CorpObjs) FilterName(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("name", op, params...)
}


func (o _CorpObjs) FilterLocation(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("location", op, params...)
}


func (o _CorpObjs) FilterNamespace(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("namespace", op, params...)
}


func (o _CorpObjs) FilterCityId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("city_id", op, params...)
}


func (o _CorpObjs) FilterSales(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("sales", op, params...)
}


func (o _CorpObjs) FilterRemoved(op string, p bool, ps ...bool) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("removed", op, params...)
}


func (o _CorpObjs) FilterInvoiceTitle(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("invoice_title", op, params...)
}


func (o _CorpObjs) FilterTel(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("tel", op, params...)
}


func (o _CorpObjs) FilterPriceLimit(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("price_limit", op, params...)
}


func (o _CorpObjs) FilterRealnameLabel(op string, p bool, ps ...bool) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("realname_label", op, params...)
}


func (o _CorpObjs) FilterEmailLimit(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("email_limit", op, params...)
}


func (o _CorpObjs) FilterAutoConfirm(op string, p bool, ps ...bool) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("auto_confirm", op, params...)
}


func (o _CorpObjs) FilterDisplayUserPrice(op string, p bool, ps ...bool) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("display_user_price", op, params...)
}


func (o _CorpObjs) FilterLocations(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("locations", op, params...)
}


func (o _CorpObjs) FilterUserMessage(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("user_message", op, params...)
}


func (o _CorpObjs) FilterOpMessage(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("op_message", op, params...)
}


func (o _CorpObjs) FilterCreateTime(op string, p time.Time, ps ...time.Time) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("create_time", op, params...)
}


func (o _CorpObjs) FilterUpdateTime(op string, p time.Time, ps ...time.Time) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("update_time", op, params...)
}


func (o _CorpObjs) FilterCreator(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("creator", op, params...)
}


func (o _CorpObjs) FilterOperator(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("operator", op, params...)
}



///// Managed Objects Columns definition

func (o _CorpObjs) ColumnId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"id", value}
}

func (o _CorpObjs) ColumnCorpGroupId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"corp_group_id", value}
}

func (o _CorpObjs) ColumnName(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"name", value}
}

func (o _CorpObjs) ColumnLocation(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"location", value}
}

func (o _CorpObjs) ColumnNamespace(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"namespace", value}
}

func (o _CorpObjs) ColumnCityId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"city_id", value}
}

func (o _CorpObjs) ColumnSales(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"sales", value}
}

func (o _CorpObjs) ColumnRemoved(p ...bool) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"removed", value}
}

func (o _CorpObjs) ColumnInvoiceTitle(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"invoice_title", value}
}

func (o _CorpObjs) ColumnTel(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"tel", value}
}

func (o _CorpObjs) ColumnPriceLimit(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"price_limit", value}
}

func (o _CorpObjs) ColumnRealnameLabel(p ...bool) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"realname_label", value}
}

func (o _CorpObjs) ColumnEmailLimit(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"email_limit", value}
}

func (o _CorpObjs) ColumnAutoConfirm(p ...bool) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"auto_confirm", value}
}

func (o _CorpObjs) ColumnDisplayUserPrice(p ...bool) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"display_user_price", value}
}

func (o _CorpObjs) ColumnLocations(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"locations", value}
}

func (o _CorpObjs) ColumnUserMessage(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"user_message", value}
}

func (o _CorpObjs) ColumnOpMessage(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"op_message", value}
}

func (o _CorpObjs) ColumnCreateTime(p ...time.Time) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"create_time", value}
}

func (o _CorpObjs) ColumnUpdateTime(p ...time.Time) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"update_time", value}
}

func (o _CorpObjs) ColumnCreator(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"creator", value}
}

func (o _CorpObjs) ColumnOperator(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"operator", value}
}


////// Internal helper funcs

func (o _CorpObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _CorpObjs) toCorp(columns []gmq.Column, rb []sql.RawBytes) Corp {
	obj := Corp{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "id":
				obj.Id = gmq.AsInt64(rb[i])
			case "corp_group_id":
				obj.CorpGroupId = gmq.AsInt64(rb[i])
			case "name":
				obj.Name = gmq.AsString(rb[i])
			case "location":
				obj.Location = gmq.AsString(rb[i])
			case "namespace":
				obj.Namespace = gmq.AsString(rb[i])
			case "city_id":
				obj.CityId = gmq.AsInt64(rb[i])
			case "sales":
				obj.Sales = gmq.AsString(rb[i])
			case "removed":
				obj.Removed = gmq.AsBool(rb[i])
			case "invoice_title":
				obj.InvoiceTitle = gmq.AsString(rb[i])
			case "tel":
				obj.Tel = gmq.AsString(rb[i])
			case "price_limit":
				obj.PriceLimit = gmq.AsFloat64(rb[i])
			case "realname_label":
				obj.RealnameLabel = gmq.AsBool(rb[i])
			case "email_limit":
				obj.EmailLimit = gmq.AsString(rb[i])
			case "auto_confirm":
				obj.AutoConfirm = gmq.AsBool(rb[i])
			case "display_user_price":
				obj.DisplayUserPrice = gmq.AsBool(rb[i])
			case "locations":
				obj.Locations = gmq.AsString(rb[i])
			case "user_message":
				obj.UserMessage = gmq.AsString(rb[i])
			case "op_message":
				obj.OpMessage = gmq.AsString(rb[i])
			case "create_time":
				obj.CreateTime = gmq.AsTime(rb[i])
			case "update_time":
				obj.UpdateTime = gmq.AsTime(rb[i])
			case "creator":
				obj.Creator = gmq.AsInt64(rb[i])
			case "operator":
				obj.Operator = gmq.AsInt64(rb[i])
			 }
		}
	}
	return obj
}

func (o _CorpObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId())
		case "CorpGroupId":
			data = append(data, o.ColumnCorpGroupId())
		case "Name":
			data = append(data, o.ColumnName())
		case "Location":
			data = append(data, o.ColumnLocation())
		case "Namespace":
			data = append(data, o.ColumnNamespace())
		case "CityId":
			data = append(data, o.ColumnCityId())
		case "Sales":
			data = append(data, o.ColumnSales())
		case "Removed":
			data = append(data, o.ColumnRemoved())
		case "InvoiceTitle":
			data = append(data, o.ColumnInvoiceTitle())
		case "Tel":
			data = append(data, o.ColumnTel())
		case "PriceLimit":
			data = append(data, o.ColumnPriceLimit())
		case "RealnameLabel":
			data = append(data, o.ColumnRealnameLabel())
		case "EmailLimit":
			data = append(data, o.ColumnEmailLimit())
		case "AutoConfirm":
			data = append(data, o.ColumnAutoConfirm())
		case "DisplayUserPrice":
			data = append(data, o.ColumnDisplayUserPrice())
		case "Locations":
			data = append(data, o.ColumnLocations())
		case "UserMessage":
			data = append(data, o.ColumnUserMessage())
		case "OpMessage":
			data = append(data, o.ColumnOpMessage())
		case "CreateTime":
			data = append(data, o.ColumnCreateTime())
		case "UpdateTime":
			data = append(data, o.ColumnUpdateTime())
		case "Creator":
			data = append(data, o.ColumnCreator())
		case "Operator":
			data = append(data, o.ColumnOperator())
		 }
	}
	return data
}

func (o _CorpObjs) columnsWithData(obj Corp, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId(obj.Id))
		case "CorpGroupId":
			data = append(data, o.ColumnCorpGroupId(obj.CorpGroupId))
		case "Name":
			data = append(data, o.ColumnName(obj.Name))
		case "Location":
			data = append(data, o.ColumnLocation(obj.Location))
		case "Namespace":
			data = append(data, o.ColumnNamespace(obj.Namespace))
		case "CityId":
			data = append(data, o.ColumnCityId(obj.CityId))
		case "Sales":
			data = append(data, o.ColumnSales(obj.Sales))
		case "Removed":
			data = append(data, o.ColumnRemoved(obj.Removed))
		case "InvoiceTitle":
			data = append(data, o.ColumnInvoiceTitle(obj.InvoiceTitle))
		case "Tel":
			data = append(data, o.ColumnTel(obj.Tel))
		case "PriceLimit":
			data = append(data, o.ColumnPriceLimit(obj.PriceLimit))
		case "RealnameLabel":
			data = append(data, o.ColumnRealnameLabel(obj.RealnameLabel))
		case "EmailLimit":
			data = append(data, o.ColumnEmailLimit(obj.EmailLimit))
		case "AutoConfirm":
			data = append(data, o.ColumnAutoConfirm(obj.AutoConfirm))
		case "DisplayUserPrice":
			data = append(data, o.ColumnDisplayUserPrice(obj.DisplayUserPrice))
		case "Locations":
			data = append(data, o.ColumnLocations(obj.Locations))
		case "UserMessage":
			data = append(data, o.ColumnUserMessage(obj.UserMessage))
		case "OpMessage":
			data = append(data, o.ColumnOpMessage(obj.OpMessage))
		case "CreateTime":
			data = append(data, o.ColumnCreateTime(obj.CreateTime))
		case "UpdateTime":
			data = append(data, o.ColumnUpdateTime(obj.UpdateTime))
		case "Creator":
			data = append(data, o.ColumnCreator(obj.Creator))
		case "Operator":
			data = append(data, o.ColumnOperator(obj.Operator))
		 }
	}
	return data
}

var CorpObjs _CorpObjs

func init() {
	CorpObjs.fcMap = map[string]string{
		"Id": "id",
		"CorpGroupId": "corp_group_id",
		"Name": "name",
		"Location": "location",
		"Namespace": "namespace",
		"CityId": "city_id",
		"Sales": "sales",
		"Removed": "removed",
		"InvoiceTitle": "invoice_title",
		"Tel": "tel",
		"PriceLimit": "price_limit",
		"RealnameLabel": "realname_label",
		"EmailLimit": "email_limit",
		"AutoConfirm": "auto_confirm",
		"DisplayUserPrice": "display_user_price",
		"Locations": "locations",
		"UserMessage": "user_message",
		"OpMessage": "op_message",
		"CreateTime": "create_time",
		"UpdateTime": "update_time",
		"Creator": "creator",
		"Operator": "operator",
		 }
	gob.Register(Corp{})
}
