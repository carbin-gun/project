// Code generated by project
// dish.go contains model for the database table [dbname=baseinfo sslmode=disable.dish]

package models

import (
	"encoding/json"
	"encoding/gob"
	"fmt"
	"strings"
	"github.com/jmoiron/sqlx"
	"database/sql"
	"time"
)
type Dish struct {
	Id int64 `json:"id"`
	MenuId int64 `json:"menu_id"`
	SectionId int64 `json:"section_id"`
	CorpId int64 `json:"corp_id"`
	RestaurantId int64 `json:"restaurant_id"`
	Name string `json:"name"`
	Ingredient string `json:"ingredient"`
	Tags string `json:"tags"`
	Type int `json:"type"`
	Price float64 `json:"price"`
	CreateTime time.Time `json:"create_time"`
	UpdateTime time.Time `json:"update_time"`
	Creator int64 `json:"creator"`
	Operator int64 `json:"operator"`
	Removed bool `json:"removed"`
	
}

// Start of the Dish APIs.

func (obj Dish) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return fmt.Sprintf("<Dish Id=%v>", obj.Id)
	} else {
		return string(data)
	}
}

func  QueryById(id int64) (*Dish,error){

 	ret:=&Dish{}
 	err:=db.Get(ret,"select * from dbname=baseinfo sslmode=disable where id=",id)
 	return ret,err
}

func InsertDish(obj Dish) error(){

  db.Exec("insert into dbname=baseinfo sslmode=disable(id,menu_id,section_id,corp_id,restaurant_id,name,ingredient,tags,type,price,create_time,update_time,creator,operator,removed) values(obj.Id,obj.MenuId,obj.SectionId,obj.CorpId,obj.RestaurantId,obj.Name,obj.Ingredient,obj.Tags,obj.Type,obj.Price,obj.CreateTime,obj.UpdateTime,obj.Creator,obj.Operator,obj.Removed)",obj)
  return nil
}

func (obj Dish) Get(dbtx gmq.DbTx) (Dish, error) {
	filter := DishObjs.FilterId("=", obj.Id)
	if result, err := DishObjs.Select().Where(filter).One(dbtx); err != nil {
		return obj, err
	} else {
		return result, nil
	}
}

func (obj Dish) Insert(dbtx gmq.DbTx) (Dish, error) {
	if result, err := DishObjs.Insert(obj).Run(dbtx); err != nil {
		return obj, err
	}else {
		if dbtx.DriverName() != "postgres" {
			if id, err := result.LastInsertId(); err != nil {
				return obj, err
			} else {
				obj.Id = id
				return obj, err
			}
		}
		return obj, nil
	}
}

func (obj Dish) Update(dbtx gmq.DbTx) (int64, error) {
	fields := []string{ "MenuId", "SectionId", "CorpId", "RestaurantId", "Name", "Ingredient", "Tags", "Type", "Price", "CreateTime", "UpdateTime", "Creator", "Operator", "Removed" }
	filter := DishObjs.FilterId("=", obj.Id)
	if result, err := DishObjs.Update(obj, fields...).Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

func (obj Dish) Delete(dbtx gmq.DbTx) (int64, error) {
	filter := DishObjs.FilterId("=", obj.Id)
	if result, err := DishObjs.Delete().Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

// Start of the inner Query Api

type _DishQuery struct {
	gmq.Query
}

func (q _DishQuery) Where(f gmq.Filter) _DishQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _DishQuery) OrderBy(by ...string) _DishQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := DishObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _DishQuery) GroupBy(by ...string) _DishQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := DishObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _DishQuery) Limit(offsets ...int64) _DishQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _DishQuery) Page(number, size int) _DishQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _DishQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type DishRowVisitor func(obj Dish) bool

func (q _DishQuery) Iterate(dbtx gmq.DbTx, functor DishRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := DishObjs.toDish(columns, rb)
		return functor(obj)
	})
}

func (q _DishQuery) One(dbtx gmq.DbTx) (Dish, error) {
	var obj Dish
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = DishObjs.toDish(columns, rb)
		return true
	})
	return obj, err
}

func (q _DishQuery) List(dbtx gmq.DbTx) ([]Dish, error) {
	result := make([]Dish, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := DishObjs.toDish(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

// Start of the model facade Apis.

type _DishObjs struct {
	fcMap map[string]string
}

func (o _DishObjs) Names() (schema, tbl, alias string) {
	return "dbname=baseinfo sslmode=disable", "dish", "Dish"
}

func (o _DishObjs) Select(fields ...string) _DishQuery {
	q := _DishQuery{}
	if len(fields) == 0 {
		fields = []string{ "Id", "MenuId", "SectionId", "CorpId", "RestaurantId", "Name", "Ingredient", "Tags", "Type", "Price", "CreateTime", "UpdateTime", "Creator", "Operator", "Removed" }
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _DishObjs) Insert(obj Dish) _DishQuery {
	q := _DishQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj, "MenuId", "SectionId", "CorpId", "RestaurantId", "Name", "Ingredient", "Tags", "Type", "Price", "Creator", "Operator", "Removed"))
	return q
}

func (o _DishObjs) Update(obj Dish, fields ...string) _DishQuery {
	q := _DishQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _DishObjs) Delete() _DishQuery {
	q := _DishQuery{}
	q.Query = gmq.Delete(o)
	return q
}


///// Managed Objects Filters definition

func (o _DishObjs) FilterId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("id", op, params...)
}


func (o _DishObjs) FilterMenuId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("menu_id", op, params...)
}


func (o _DishObjs) FilterSectionId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("section_id", op, params...)
}


func (o _DishObjs) FilterCorpId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("corp_id", op, params...)
}


func (o _DishObjs) FilterRestaurantId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("restaurant_id", op, params...)
}


func (o _DishObjs) FilterName(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("name", op, params...)
}


func (o _DishObjs) FilterIngredient(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("ingredient", op, params...)
}


func (o _DishObjs) FilterTags(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("tags", op, params...)
}


func (o _DishObjs) FilterType(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("type", op, params...)
}


func (o _DishObjs) FilterPrice(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("price", op, params...)
}


func (o _DishObjs) FilterCreateTime(op string, p time.Time, ps ...time.Time) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("create_time", op, params...)
}


func (o _DishObjs) FilterUpdateTime(op string, p time.Time, ps ...time.Time) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("update_time", op, params...)
}


func (o _DishObjs) FilterCreator(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("creator", op, params...)
}


func (o _DishObjs) FilterOperator(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("operator", op, params...)
}


func (o _DishObjs) FilterRemoved(op string, p bool, ps ...bool) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("removed", op, params...)
}



///// Managed Objects Columns definition

func (o _DishObjs) ColumnId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"id", value}
}

func (o _DishObjs) ColumnMenuId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"menu_id", value}
}

func (o _DishObjs) ColumnSectionId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"section_id", value}
}

func (o _DishObjs) ColumnCorpId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"corp_id", value}
}

func (o _DishObjs) ColumnRestaurantId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"restaurant_id", value}
}

func (o _DishObjs) ColumnName(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"name", value}
}

func (o _DishObjs) ColumnIngredient(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"ingredient", value}
}

func (o _DishObjs) ColumnTags(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"tags", value}
}

func (o _DishObjs) ColumnType(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"type", value}
}

func (o _DishObjs) ColumnPrice(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"price", value}
}

func (o _DishObjs) ColumnCreateTime(p ...time.Time) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"create_time", value}
}

func (o _DishObjs) ColumnUpdateTime(p ...time.Time) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"update_time", value}
}

func (o _DishObjs) ColumnCreator(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"creator", value}
}

func (o _DishObjs) ColumnOperator(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"operator", value}
}

func (o _DishObjs) ColumnRemoved(p ...bool) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"removed", value}
}


////// Internal helper funcs

func (o _DishObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _DishObjs) toDish(columns []gmq.Column, rb []sql.RawBytes) Dish {
	obj := Dish{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "id":
				obj.Id = gmq.AsInt64(rb[i])
			case "menu_id":
				obj.MenuId = gmq.AsInt64(rb[i])
			case "section_id":
				obj.SectionId = gmq.AsInt64(rb[i])
			case "corp_id":
				obj.CorpId = gmq.AsInt64(rb[i])
			case "restaurant_id":
				obj.RestaurantId = gmq.AsInt64(rb[i])
			case "name":
				obj.Name = gmq.AsString(rb[i])
			case "ingredient":
				obj.Ingredient = gmq.AsString(rb[i])
			case "tags":
				obj.Tags = gmq.AsString(rb[i])
			case "type":
				obj.Type = gmq.AsInt(rb[i])
			case "price":
				obj.Price = gmq.AsFloat64(rb[i])
			case "create_time":
				obj.CreateTime = gmq.AsTime(rb[i])
			case "update_time":
				obj.UpdateTime = gmq.AsTime(rb[i])
			case "creator":
				obj.Creator = gmq.AsInt64(rb[i])
			case "operator":
				obj.Operator = gmq.AsInt64(rb[i])
			case "removed":
				obj.Removed = gmq.AsBool(rb[i])
			 }
		}
	}
	return obj
}

func (o _DishObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId())
		case "MenuId":
			data = append(data, o.ColumnMenuId())
		case "SectionId":
			data = append(data, o.ColumnSectionId())
		case "CorpId":
			data = append(data, o.ColumnCorpId())
		case "RestaurantId":
			data = append(data, o.ColumnRestaurantId())
		case "Name":
			data = append(data, o.ColumnName())
		case "Ingredient":
			data = append(data, o.ColumnIngredient())
		case "Tags":
			data = append(data, o.ColumnTags())
		case "Type":
			data = append(data, o.ColumnType())
		case "Price":
			data = append(data, o.ColumnPrice())
		case "CreateTime":
			data = append(data, o.ColumnCreateTime())
		case "UpdateTime":
			data = append(data, o.ColumnUpdateTime())
		case "Creator":
			data = append(data, o.ColumnCreator())
		case "Operator":
			data = append(data, o.ColumnOperator())
		case "Removed":
			data = append(data, o.ColumnRemoved())
		 }
	}
	return data
}

func (o _DishObjs) columnsWithData(obj Dish, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId(obj.Id))
		case "MenuId":
			data = append(data, o.ColumnMenuId(obj.MenuId))
		case "SectionId":
			data = append(data, o.ColumnSectionId(obj.SectionId))
		case "CorpId":
			data = append(data, o.ColumnCorpId(obj.CorpId))
		case "RestaurantId":
			data = append(data, o.ColumnRestaurantId(obj.RestaurantId))
		case "Name":
			data = append(data, o.ColumnName(obj.Name))
		case "Ingredient":
			data = append(data, o.ColumnIngredient(obj.Ingredient))
		case "Tags":
			data = append(data, o.ColumnTags(obj.Tags))
		case "Type":
			data = append(data, o.ColumnType(obj.Type))
		case "Price":
			data = append(data, o.ColumnPrice(obj.Price))
		case "CreateTime":
			data = append(data, o.ColumnCreateTime(obj.CreateTime))
		case "UpdateTime":
			data = append(data, o.ColumnUpdateTime(obj.UpdateTime))
		case "Creator":
			data = append(data, o.ColumnCreator(obj.Creator))
		case "Operator":
			data = append(data, o.ColumnOperator(obj.Operator))
		case "Removed":
			data = append(data, o.ColumnRemoved(obj.Removed))
		 }
	}
	return data
}

var DishObjs _DishObjs

func init() {
	DishObjs.fcMap = map[string]string{
		"Id": "id",
		"MenuId": "menu_id",
		"SectionId": "section_id",
		"CorpId": "corp_id",
		"RestaurantId": "restaurant_id",
		"Name": "name",
		"Ingredient": "ingredient",
		"Tags": "tags",
		"Type": "type",
		"Price": "price",
		"CreateTime": "create_time",
		"UpdateTime": "update_time",
		"Creator": "creator",
		"Operator": "operator",
		"Removed": "removed",
		 }
	gob.Register(Dish{})
}
