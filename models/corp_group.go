// Code generated by project
// corp_group.go contains model for the database table [dbname=baseinfo sslmode=disable.corp_group]

package models

import (
	"encoding/json"
	"encoding/gob"
	"fmt"
	"strings"
	"github.com/jmoiron/sqlx"
	"database/sql"
	
)
type CorpGroup struct {
	Id int64 `json:"id"`
	Name string `json:"name"`
	Removed bool `json:"removed"`
	CityId int64 `json:"city_id"`
	Type int `json:"type"`
	
}

// Start of the CorpGroup APIs.

func (obj CorpGroup) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return fmt.Sprintf("<CorpGroup Id=%v>", obj.Id)
	} else {
		return string(data)
	}
}

func  QueryById(id int64) (*CorpGroup,error){

 	ret:=&CorpGroup{}
 	err:=db.Get(ret,"select * from dbname=baseinfo sslmode=disable where id=",id)
 	return ret,err
}

func InsertCorpGroup(obj CorpGroup) error(){

  db.Exec("insert into dbname=baseinfo sslmode=disable(id,name,removed,city_id,type) values(obj.Id,obj.Name,obj.Removed,obj.CityId,obj.Type)",obj)
  return nil
}

func (obj CorpGroup) Get(dbtx gmq.DbTx) (CorpGroup, error) {
	filter := CorpGroupObjs.FilterId("=", obj.Id)
	if result, err := CorpGroupObjs.Select().Where(filter).One(dbtx); err != nil {
		return obj, err
	} else {
		return result, nil
	}
}

func (obj CorpGroup) Insert(dbtx gmq.DbTx) (CorpGroup, error) {
	if result, err := CorpGroupObjs.Insert(obj).Run(dbtx); err != nil {
		return obj, err
	}else {
		if dbtx.DriverName() != "postgres" {
			if id, err := result.LastInsertId(); err != nil {
				return obj, err
			} else {
				obj.Id = id
				return obj, err
			}
		}
		return obj, nil
	}
}

func (obj CorpGroup) Update(dbtx gmq.DbTx) (int64, error) {
	fields := []string{ "Name", "Removed", "CityId", "Type" }
	filter := CorpGroupObjs.FilterId("=", obj.Id)
	if result, err := CorpGroupObjs.Update(obj, fields...).Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

func (obj CorpGroup) Delete(dbtx gmq.DbTx) (int64, error) {
	filter := CorpGroupObjs.FilterId("=", obj.Id)
	if result, err := CorpGroupObjs.Delete().Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

// Start of the inner Query Api

type _CorpGroupQuery struct {
	gmq.Query
}

func (q _CorpGroupQuery) Where(f gmq.Filter) _CorpGroupQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _CorpGroupQuery) OrderBy(by ...string) _CorpGroupQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := CorpGroupObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _CorpGroupQuery) GroupBy(by ...string) _CorpGroupQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := CorpGroupObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _CorpGroupQuery) Limit(offsets ...int64) _CorpGroupQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _CorpGroupQuery) Page(number, size int) _CorpGroupQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _CorpGroupQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type CorpGroupRowVisitor func(obj CorpGroup) bool

func (q _CorpGroupQuery) Iterate(dbtx gmq.DbTx, functor CorpGroupRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := CorpGroupObjs.toCorpGroup(columns, rb)
		return functor(obj)
	})
}

func (q _CorpGroupQuery) One(dbtx gmq.DbTx) (CorpGroup, error) {
	var obj CorpGroup
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = CorpGroupObjs.toCorpGroup(columns, rb)
		return true
	})
	return obj, err
}

func (q _CorpGroupQuery) List(dbtx gmq.DbTx) ([]CorpGroup, error) {
	result := make([]CorpGroup, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := CorpGroupObjs.toCorpGroup(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

// Start of the model facade Apis.

type _CorpGroupObjs struct {
	fcMap map[string]string
}

func (o _CorpGroupObjs) Names() (schema, tbl, alias string) {
	return "dbname=baseinfo sslmode=disable", "corp_group", "CorpGroup"
}

func (o _CorpGroupObjs) Select(fields ...string) _CorpGroupQuery {
	q := _CorpGroupQuery{}
	if len(fields) == 0 {
		fields = []string{ "Id", "Name", "Removed", "CityId", "Type" }
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _CorpGroupObjs) Insert(obj CorpGroup) _CorpGroupQuery {
	q := _CorpGroupQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj, "Name", "Removed", "CityId", "Type"))
	return q
}

func (o _CorpGroupObjs) Update(obj CorpGroup, fields ...string) _CorpGroupQuery {
	q := _CorpGroupQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _CorpGroupObjs) Delete() _CorpGroupQuery {
	q := _CorpGroupQuery{}
	q.Query = gmq.Delete(o)
	return q
}


///// Managed Objects Filters definition

func (o _CorpGroupObjs) FilterId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("id", op, params...)
}


func (o _CorpGroupObjs) FilterName(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("name", op, params...)
}


func (o _CorpGroupObjs) FilterRemoved(op string, p bool, ps ...bool) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("removed", op, params...)
}


func (o _CorpGroupObjs) FilterCityId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("city_id", op, params...)
}


func (o _CorpGroupObjs) FilterType(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("type", op, params...)
}



///// Managed Objects Columns definition

func (o _CorpGroupObjs) ColumnId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"id", value}
}

func (o _CorpGroupObjs) ColumnName(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"name", value}
}

func (o _CorpGroupObjs) ColumnRemoved(p ...bool) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"removed", value}
}

func (o _CorpGroupObjs) ColumnCityId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"city_id", value}
}

func (o _CorpGroupObjs) ColumnType(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"type", value}
}


////// Internal helper funcs

func (o _CorpGroupObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _CorpGroupObjs) toCorpGroup(columns []gmq.Column, rb []sql.RawBytes) CorpGroup {
	obj := CorpGroup{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "id":
				obj.Id = gmq.AsInt64(rb[i])
			case "name":
				obj.Name = gmq.AsString(rb[i])
			case "removed":
				obj.Removed = gmq.AsBool(rb[i])
			case "city_id":
				obj.CityId = gmq.AsInt64(rb[i])
			case "type":
				obj.Type = gmq.AsInt(rb[i])
			 }
		}
	}
	return obj
}

func (o _CorpGroupObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId())
		case "Name":
			data = append(data, o.ColumnName())
		case "Removed":
			data = append(data, o.ColumnRemoved())
		case "CityId":
			data = append(data, o.ColumnCityId())
		case "Type":
			data = append(data, o.ColumnType())
		 }
	}
	return data
}

func (o _CorpGroupObjs) columnsWithData(obj CorpGroup, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId(obj.Id))
		case "Name":
			data = append(data, o.ColumnName(obj.Name))
		case "Removed":
			data = append(data, o.ColumnRemoved(obj.Removed))
		case "CityId":
			data = append(data, o.ColumnCityId(obj.CityId))
		case "Type":
			data = append(data, o.ColumnType(obj.Type))
		 }
	}
	return data
}

var CorpGroupObjs _CorpGroupObjs

func init() {
	CorpGroupObjs.fcMap = map[string]string{
		"Id": "id",
		"Name": "name",
		"Removed": "removed",
		"CityId": "city_id",
		"Type": "type",
		 }
	gob.Register(CorpGroup{})
}
