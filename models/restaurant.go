// Code generated by project
// restaurant.go contains model for the database table [dbname=baseinfo sslmode=disable.restaurant]

package models

import (
	"encoding/json"
	"encoding/gob"
	"fmt"
	"strings"
	"github.com/jmoiron/sqlx"
	"database/sql"
	"time"
)
type Restaurant struct {
	Id int64 `json:"id"`
	SupplierId int64 `json:"supplier_id"`
	Owners string `json:"owners"`
	Name string `json:"name"`
	Images string `json:"images"`
	Tel string `json:"tel"`
	Location string `json:"location"`
	Address string `json:"address"`
	CityId int64 `json:"city_id"`
	MarketingId int64 `json:"marketing_id"`
	DeliveryFee int `json:"delivery_fee"`
	DeliveryRange int `json:"delivery_range"`
	CreateTime time.Time `json:"create_time"`
	UpdateTime time.Time `json:"update_time"`
	Creator int64 `json:"creator"`
	Operator int64 `json:"operator"`
	Removed bool `json:"removed"`
	Version int `json:"version"`
	
}

// Start of the Restaurant APIs.

func (obj Restaurant) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return fmt.Sprintf("<Restaurant Id=%v>", obj.Id)
	} else {
		return string(data)
	}
}

func  QueryById(id int64) (*Restaurant,error){

 	ret:=&Restaurant{}
 	err:=db.Get(ret,"select * from dbname=baseinfo sslmode=disable where id=",id)
 	return ret,err
}

func InsertRestaurant(obj Restaurant) error(){

  db.Exec("insert into dbname=baseinfo sslmode=disable(id,supplier_id,owners,name,images,tel,location,address,city_id,marketing_id,delivery_fee,delivery_range,create_time,update_time,creator,operator,removed,version) values(obj.Id,obj.SupplierId,obj.Owners,obj.Name,obj.Images,obj.Tel,obj.Location,obj.Address,obj.CityId,obj.MarketingId,obj.DeliveryFee,obj.DeliveryRange,obj.CreateTime,obj.UpdateTime,obj.Creator,obj.Operator,obj.Removed,obj.Version)",obj)
  return nil
}

func (obj Restaurant) Get(dbtx gmq.DbTx) (Restaurant, error) {
	filter := RestaurantObjs.FilterId("=", obj.Id)
	if result, err := RestaurantObjs.Select().Where(filter).One(dbtx); err != nil {
		return obj, err
	} else {
		return result, nil
	}
}

func (obj Restaurant) Insert(dbtx gmq.DbTx) (Restaurant, error) {
	if result, err := RestaurantObjs.Insert(obj).Run(dbtx); err != nil {
		return obj, err
	}else {
		if dbtx.DriverName() != "postgres" {
			if id, err := result.LastInsertId(); err != nil {
				return obj, err
			} else {
				obj.Id = id
				return obj, err
			}
		}
		return obj, nil
	}
}

func (obj Restaurant) Update(dbtx gmq.DbTx) (int64, error) {
	fields := []string{ "SupplierId", "Owners", "Name", "Images", "Tel", "Location", "Address", "CityId", "MarketingId", "DeliveryFee", "DeliveryRange", "CreateTime", "UpdateTime", "Creator", "Operator", "Removed", "Version" }
	filter := RestaurantObjs.FilterId("=", obj.Id)
	if result, err := RestaurantObjs.Update(obj, fields...).Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

func (obj Restaurant) Delete(dbtx gmq.DbTx) (int64, error) {
	filter := RestaurantObjs.FilterId("=", obj.Id)
	if result, err := RestaurantObjs.Delete().Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

// Start of the inner Query Api

type _RestaurantQuery struct {
	gmq.Query
}

func (q _RestaurantQuery) Where(f gmq.Filter) _RestaurantQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _RestaurantQuery) OrderBy(by ...string) _RestaurantQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := RestaurantObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _RestaurantQuery) GroupBy(by ...string) _RestaurantQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := RestaurantObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _RestaurantQuery) Limit(offsets ...int64) _RestaurantQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _RestaurantQuery) Page(number, size int) _RestaurantQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _RestaurantQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type RestaurantRowVisitor func(obj Restaurant) bool

func (q _RestaurantQuery) Iterate(dbtx gmq.DbTx, functor RestaurantRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := RestaurantObjs.toRestaurant(columns, rb)
		return functor(obj)
	})
}

func (q _RestaurantQuery) One(dbtx gmq.DbTx) (Restaurant, error) {
	var obj Restaurant
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = RestaurantObjs.toRestaurant(columns, rb)
		return true
	})
	return obj, err
}

func (q _RestaurantQuery) List(dbtx gmq.DbTx) ([]Restaurant, error) {
	result := make([]Restaurant, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := RestaurantObjs.toRestaurant(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

// Start of the model facade Apis.

type _RestaurantObjs struct {
	fcMap map[string]string
}

func (o _RestaurantObjs) Names() (schema, tbl, alias string) {
	return "dbname=baseinfo sslmode=disable", "restaurant", "Restaurant"
}

func (o _RestaurantObjs) Select(fields ...string) _RestaurantQuery {
	q := _RestaurantQuery{}
	if len(fields) == 0 {
		fields = []string{ "Id", "SupplierId", "Owners", "Name", "Images", "Tel", "Location", "Address", "CityId", "MarketingId", "DeliveryFee", "DeliveryRange", "CreateTime", "UpdateTime", "Creator", "Operator", "Removed", "Version" }
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _RestaurantObjs) Insert(obj Restaurant) _RestaurantQuery {
	q := _RestaurantQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj, "SupplierId", "Owners", "Name", "Images", "Tel", "Location", "Address", "CityId", "MarketingId", "DeliveryFee", "DeliveryRange", "Creator", "Operator", "Removed", "Version"))
	return q
}

func (o _RestaurantObjs) Update(obj Restaurant, fields ...string) _RestaurantQuery {
	q := _RestaurantQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _RestaurantObjs) Delete() _RestaurantQuery {
	q := _RestaurantQuery{}
	q.Query = gmq.Delete(o)
	return q
}


///// Managed Objects Filters definition

func (o _RestaurantObjs) FilterId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("id", op, params...)
}


func (o _RestaurantObjs) FilterSupplierId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("supplier_id", op, params...)
}


func (o _RestaurantObjs) FilterOwners(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("owners", op, params...)
}


func (o _RestaurantObjs) FilterName(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("name", op, params...)
}


func (o _RestaurantObjs) FilterImages(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("images", op, params...)
}


func (o _RestaurantObjs) FilterTel(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("tel", op, params...)
}


func (o _RestaurantObjs) FilterLocation(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("location", op, params...)
}


func (o _RestaurantObjs) FilterAddress(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("address", op, params...)
}


func (o _RestaurantObjs) FilterCityId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("city_id", op, params...)
}


func (o _RestaurantObjs) FilterMarketingId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("marketing_id", op, params...)
}


func (o _RestaurantObjs) FilterDeliveryFee(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("delivery_fee", op, params...)
}


func (o _RestaurantObjs) FilterDeliveryRange(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("delivery_range", op, params...)
}


func (o _RestaurantObjs) FilterCreateTime(op string, p time.Time, ps ...time.Time) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("create_time", op, params...)
}


func (o _RestaurantObjs) FilterUpdateTime(op string, p time.Time, ps ...time.Time) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("update_time", op, params...)
}


func (o _RestaurantObjs) FilterCreator(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("creator", op, params...)
}


func (o _RestaurantObjs) FilterOperator(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("operator", op, params...)
}


func (o _RestaurantObjs) FilterRemoved(op string, p bool, ps ...bool) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("removed", op, params...)
}


func (o _RestaurantObjs) FilterVersion(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("version", op, params...)
}



///// Managed Objects Columns definition

func (o _RestaurantObjs) ColumnId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"id", value}
}

func (o _RestaurantObjs) ColumnSupplierId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"supplier_id", value}
}

func (o _RestaurantObjs) ColumnOwners(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"owners", value}
}

func (o _RestaurantObjs) ColumnName(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"name", value}
}

func (o _RestaurantObjs) ColumnImages(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"images", value}
}

func (o _RestaurantObjs) ColumnTel(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"tel", value}
}

func (o _RestaurantObjs) ColumnLocation(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"location", value}
}

func (o _RestaurantObjs) ColumnAddress(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"address", value}
}

func (o _RestaurantObjs) ColumnCityId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"city_id", value}
}

func (o _RestaurantObjs) ColumnMarketingId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"marketing_id", value}
}

func (o _RestaurantObjs) ColumnDeliveryFee(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"delivery_fee", value}
}

func (o _RestaurantObjs) ColumnDeliveryRange(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"delivery_range", value}
}

func (o _RestaurantObjs) ColumnCreateTime(p ...time.Time) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"create_time", value}
}

func (o _RestaurantObjs) ColumnUpdateTime(p ...time.Time) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"update_time", value}
}

func (o _RestaurantObjs) ColumnCreator(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"creator", value}
}

func (o _RestaurantObjs) ColumnOperator(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"operator", value}
}

func (o _RestaurantObjs) ColumnRemoved(p ...bool) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"removed", value}
}

func (o _RestaurantObjs) ColumnVersion(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"version", value}
}


////// Internal helper funcs

func (o _RestaurantObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _RestaurantObjs) toRestaurant(columns []gmq.Column, rb []sql.RawBytes) Restaurant {
	obj := Restaurant{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "id":
				obj.Id = gmq.AsInt64(rb[i])
			case "supplier_id":
				obj.SupplierId = gmq.AsInt64(rb[i])
			case "owners":
				obj.Owners = gmq.AsString(rb[i])
			case "name":
				obj.Name = gmq.AsString(rb[i])
			case "images":
				obj.Images = gmq.AsString(rb[i])
			case "tel":
				obj.Tel = gmq.AsString(rb[i])
			case "location":
				obj.Location = gmq.AsString(rb[i])
			case "address":
				obj.Address = gmq.AsString(rb[i])
			case "city_id":
				obj.CityId = gmq.AsInt64(rb[i])
			case "marketing_id":
				obj.MarketingId = gmq.AsInt64(rb[i])
			case "delivery_fee":
				obj.DeliveryFee = gmq.AsInt(rb[i])
			case "delivery_range":
				obj.DeliveryRange = gmq.AsInt(rb[i])
			case "create_time":
				obj.CreateTime = gmq.AsTime(rb[i])
			case "update_time":
				obj.UpdateTime = gmq.AsTime(rb[i])
			case "creator":
				obj.Creator = gmq.AsInt64(rb[i])
			case "operator":
				obj.Operator = gmq.AsInt64(rb[i])
			case "removed":
				obj.Removed = gmq.AsBool(rb[i])
			case "version":
				obj.Version = gmq.AsInt(rb[i])
			 }
		}
	}
	return obj
}

func (o _RestaurantObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId())
		case "SupplierId":
			data = append(data, o.ColumnSupplierId())
		case "Owners":
			data = append(data, o.ColumnOwners())
		case "Name":
			data = append(data, o.ColumnName())
		case "Images":
			data = append(data, o.ColumnImages())
		case "Tel":
			data = append(data, o.ColumnTel())
		case "Location":
			data = append(data, o.ColumnLocation())
		case "Address":
			data = append(data, o.ColumnAddress())
		case "CityId":
			data = append(data, o.ColumnCityId())
		case "MarketingId":
			data = append(data, o.ColumnMarketingId())
		case "DeliveryFee":
			data = append(data, o.ColumnDeliveryFee())
		case "DeliveryRange":
			data = append(data, o.ColumnDeliveryRange())
		case "CreateTime":
			data = append(data, o.ColumnCreateTime())
		case "UpdateTime":
			data = append(data, o.ColumnUpdateTime())
		case "Creator":
			data = append(data, o.ColumnCreator())
		case "Operator":
			data = append(data, o.ColumnOperator())
		case "Removed":
			data = append(data, o.ColumnRemoved())
		case "Version":
			data = append(data, o.ColumnVersion())
		 }
	}
	return data
}

func (o _RestaurantObjs) columnsWithData(obj Restaurant, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId(obj.Id))
		case "SupplierId":
			data = append(data, o.ColumnSupplierId(obj.SupplierId))
		case "Owners":
			data = append(data, o.ColumnOwners(obj.Owners))
		case "Name":
			data = append(data, o.ColumnName(obj.Name))
		case "Images":
			data = append(data, o.ColumnImages(obj.Images))
		case "Tel":
			data = append(data, o.ColumnTel(obj.Tel))
		case "Location":
			data = append(data, o.ColumnLocation(obj.Location))
		case "Address":
			data = append(data, o.ColumnAddress(obj.Address))
		case "CityId":
			data = append(data, o.ColumnCityId(obj.CityId))
		case "MarketingId":
			data = append(data, o.ColumnMarketingId(obj.MarketingId))
		case "DeliveryFee":
			data = append(data, o.ColumnDeliveryFee(obj.DeliveryFee))
		case "DeliveryRange":
			data = append(data, o.ColumnDeliveryRange(obj.DeliveryRange))
		case "CreateTime":
			data = append(data, o.ColumnCreateTime(obj.CreateTime))
		case "UpdateTime":
			data = append(data, o.ColumnUpdateTime(obj.UpdateTime))
		case "Creator":
			data = append(data, o.ColumnCreator(obj.Creator))
		case "Operator":
			data = append(data, o.ColumnOperator(obj.Operator))
		case "Removed":
			data = append(data, o.ColumnRemoved(obj.Removed))
		case "Version":
			data = append(data, o.ColumnVersion(obj.Version))
		 }
	}
	return data
}

var RestaurantObjs _RestaurantObjs

func init() {
	RestaurantObjs.fcMap = map[string]string{
		"Id": "id",
		"SupplierId": "supplier_id",
		"Owners": "owners",
		"Name": "name",
		"Images": "images",
		"Tel": "tel",
		"Location": "location",
		"Address": "address",
		"CityId": "city_id",
		"MarketingId": "marketing_id",
		"DeliveryFee": "delivery_fee",
		"DeliveryRange": "delivery_range",
		"CreateTime": "create_time",
		"UpdateTime": "update_time",
		"Creator": "creator",
		"Operator": "operator",
		"Removed": "removed",
		"Version": "version",
		 }
	gob.Register(Restaurant{})
}
